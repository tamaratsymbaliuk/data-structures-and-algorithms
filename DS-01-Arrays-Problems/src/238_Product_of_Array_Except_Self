Given an integer array nums, return an array answer such that answer[i] is equal to the product
of all the elements of nums except nums[i]. The product of any prefix or suffix of nums is guaranteed
to fit in a 32-bit integer. You must write an algorithm that runs in O(n) time and without using the division operation.


class Solution {
    public int[] productExceptSelf(int[] nums) {

        int n = nums.length;
        int[] pref_mul = new int[n];//O(n) space
        int[] suff_mul = new int[n];//O(n) space

        for (int i = 0; i < n; i++){ //O(n)
            //assigning neutral 1 for multiplication
            pref_mul[i] = 1;
            suff_mul[i] = 1;
        }

        pref_mul[0] = nums[0];
        for (int i = 1; i < n; i++){ //O(n)
            pref_mul[i] = pref_mul[i - 1] * nums[i];
        }

        suff_mul[n-1] = nums[n-1];
        for (int i = n - 2; i >= 0; i--){ //O(n)
            suff_mul[i] = nums[i] * suff_mul[i + 1];
        }

        int[] result = new int[n]; //O(n) space
        result[0] = suff_mul[1];
        result[n - 1] = pref_mul[n - 2];
        for (int i = 1; i < n - 1; i++){ //O(n)
            result[i] = pref_mul[i - 1] * suff_mul[i + 1];
        }

        //Time: O(n)
        //Space: O(n)

        return result;

    }
}