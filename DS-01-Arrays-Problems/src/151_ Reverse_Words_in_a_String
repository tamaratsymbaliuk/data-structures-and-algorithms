Given an input string s, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that s may contain leading or trailing spaces or multiple spaces between two words.
The returned string should only have a single space separating the words. Do not include any extra spaces.


using trim(),split() methods:

class Solution {
    public String reverseWords(String s) {
        // Trim the input string to remove leading and trailing spaces
        String[] str = s.trim().split("\\s+");

        // Initialize the output string
        String result = "";

        // Iterate through the words in reverse order
        for (int i = str.length - 1; i > 0; i--) {
            // Append the current word and a space to the output
            result += str[i] + " ";
        }

        // Append the first word to the output (without trailing space)
        return result + str[0];
    }

    not using trim and split methods

public String reverseWords(String s) {


        char[] str  = s.toCharArray();
        char[] r = new char[s.length()+1];

        int l =  s.length() - 1;
        int j;
        int k = 0;

        while(l>=0){
            while(l>=0 && str[l] == ' '){
                l--;
            }
            if(l<0) break;
            j = l;
            while(l>=0 && str[l]!=' '){
                l--;
            }
            for(int i = l+1;i<=j;i++){
                r[k++] = str[i];
            }
            r[k++] = ' ';
        }
        return new String(r, 0 ,k-1);
    }

}

Example 1:

Input: s = "the sky is blue"
Output: "blue is sky the"
Example 2:

Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.